@startuml
package "CatalogoCanciones"{
    class Cancion {
        -idCancion: int
        -tituloCancion: String
        -artista: List<Artista>
        -generos: List<Genero>
        -duracion: double
        -anioCancion: int
        -portadaCancion: BufferedImage
        -archivoMP3: BLOB
    }
    class CancionDAO {
        +registrarCancion(cancion:Cancion): void
        +actualizarCancion(cancion:Cancion): void
        +buscarCanciones(): List<Cancion>
        +buscarCancionNombre(nombre: string): Cancion
        +eliminarCancion(cancion:Cancion): void
        +esNombreUnico(nombre: String): boolean
    }
    enum Genero {
        GAME_OST
        ROCK
        ROCK_ALTERNATIVO
        VALS
        TANGO
        REGIONAL_MEXICANA
        RAP
        CLASICA
        MOVIE_OST
        JAZZ
        COUNTRY
        POP
        REGGAETON
        TRAP_LATINO
        TRAP
        K_POP
        BOLERO
        PASILLO
    }
class ServicioValidacionCancion {
    - cancionDAO: CancionDAO

    +validarTitulo(titulo: String): boolean
    +validarAnio(anio: int): boolean
    +validarArtistas(artistas: List<ArtistaDTO>): boolean
    +validarGeneros(generos: List<String>): boolean
    +validarPortada(portada: byte[]): boolean
    +validarArchivoMP3(archivoMP3: byte[]): boolean
    +validar(cancion: CancionDTO, esActualizacion: boolean): boolean
    +esNombreUnico(nombre: String): boolean
}
Cancion --> CancionDAO
Cancion --> Genero
ServicioValidacionCancion --> CancionDAO
}

package "CatalogoArtistas" {
    class ArtistaDAO {
        +registrarArtista(artista: Artista):void
        +actualizarArtista(artista: Artista):void
        +eliminarArtista(artista: Artista): void
        +buscarArtistas(): List<Artista>
        +buscarArtista(id: int): Artista
    }
    class "ServicioValidacion"{
        +validarCampos(artista: Artista):boolean
        +esNombreUnico(nombre: String): boolean
        +tieneElementoAsociado(artista: Artista):boolean
    }
    class "Artista"{
        -id:int
        -nombre:String
        -generos:List<Genero>
        -fechaNacimiento: Date
        -biografia: String
        -imagen: BufferedImage
    }

    interface IUnicoNombreValidable{
       +esNombreUnico(nombre: String): boolean
    }
    interface IAsociacionValidable{
       +tieneElementosAsociados(artista: Artista):boolean
    }
ArtistaDAO --> Artista
ArtistaDAO --> ServicioValidacion
ServicioValidacion --> Artista
ServicioValidacion ..|> IUnicoNombreValidable
ServicioValidacion ..|> IAsociacionValidable
Artista --> Genero
}
package "Administraci√≥n de usuarios" {
  class Perfil {
    - nombre: String
    - apellido: String
    - correo: String
    - contrasenia: String
    - estadoCuenta: String
    - fechaRegistro: Date
    - foto: String
  }

  class Usuario {
    - preferenciasMusicales: List<Genero>
    + actualizarPerfil(nombre, apellido, foto): void
    + agregarPreferenciasMusicales(generos: List<Genero>): void
  }

  class Administrador {
    + consultarUsuarios(): List<Perfil>
    + activarCuenta(usuario: Perfil): void
    + desactivarCuenta(usuario: Perfil): void
    + cambiarTipoUsuario(usuario: Perfil, tipoUsuario: TipoUsuario): void
    + eliminarCuenta(usuario: Perfil): void
  }

  class ServicioPerfil {
    - perfilDTO: PerfilDTO
    - {static} encoder: PasswordEncoder
    + registrarUsuario(nombre, apellido, correo, contrasenia, foto): void
    + autenticar(email, password): Perfil
  }
  Enum TipoUsuario {
  ADMINISTRADOR
  USUARIO
  }
  class Sesion {
    - usuarioActual: Perfil
    - {static} sesion: Sesion
    + {static} getSesion(): Sesion
    + iniciarSesio(usarioLogueado: Perfil): void
    + cerrarSesion(): void
    + obtenerUsuarioActual(): Perfil
  }

  ServicioPerfil .> Perfil
  Usuario --|> Perfil
  Administrador --|> Perfil
  Perfil --> "1" TipoUsuario: tipoUsuario
  Perfil <-- Sesion

}


package "ReproductorDeMusica" {

    class ReproductorMusical {
        - static instancia : ReproductorMusical
        - cancionesBytes : List<byte[]>
        - indiceActual : int
        - player : AdvancedPlayerAcc
        - hiloReproduccion : Thread
        - frameActual : int
        - estadoActual : EstadoReproductor

        - ReproductorMP3(List<byte[]>)
        + static getInstancia(List<byte[]>) : ReproductorMP3
        + setEstado(EstadoReproductor) : void
        + getEstado() : EstadoReproductor

        + reproducir() : void
        + pausar() : void
        + reanudar() : void
        + detener() : void
        + siguiente() : void
        + anterior() : void

        + iniciarReproduccionDesde(frameInicial : int) : void
        + cerrarReproduccion() : void
        + moverAFrame(nuevoFrame : int) : void
        + cambiarPlaylist(nuevaLista : List<byte[]>) : void

        + getFrameActual() : int
        + setFrameActual(int) : void
        + getPlayer() : AdvancedPlayerAcc
        + getIndiceActual() : int
        + setIndiceActual(int) : void
        + getCancionesBytes() : List<byte[]>
    }

    interface EstadoReproductor {
        + reproducir() : void
        + pausar() : void
        + reanudar() : void
        + detener() : void
        + siguiente() : void
        + anterior() : void
    }

    class EstadoDetenido {
        - reproductor : ReproductorMusical
        + EstadoDetenido(ReproductorMusical)
    }

    class EstadoReproduciendo {
        - reproductor : ReproductorMusical
        + EstadoReproduciendo(ReproductorMusical)
    }

    class EstadoPausado {
        - reproductor : ReproductorMusical
        + EstadoPausado(ReproductorMusical)
    }

    class AdvancedPlayerAcc

    EstadoDetenido ..|> EstadoReproductor
    EstadoReproduciendo ..|> EstadoReproductor
    EstadoPausado ..|> EstadoReproductor

    ReproductorMusical --> EstadoReproductor
    ReproductorMusical --> EstadoDetenido
    ReproductorMusical --> EstadoReproduciendo
    ReproductorMusical --> EstadoPausado
    ReproductorMusical --> AdvancedPlayerAcc
}

folder "JLayer" <<library>> {
    class AdvancedPlayer
    interface PlaybackListener
    class PlaybackEvent
}

AdvancedPlayerAcc --|> AdvancedPlayer
AdvancedPlayerAcc --> PlaybackListener
PlaybackListener --> PlaybackEvent



package "Recomendaciones"{
 interface Recomendador {
        + recomendar(): List<T>
    }

    class RecomendadorCanciones {
        + recomendar() : List<Cancion>
    }

    class RecomendadorPlaylists {
        + recomendar() : List<Playlist>
    }

    abstract class FiltroRecomendador {
        - siguiente: Recomendador<T>
        + FiltroRecomendador(siguiente: Recomendador<T>)
        + recomendar() : List<T>
    }

    class FiltroGenero  {
        + recomendar() : List<Cancion>
    }

    class FiltroUsuario  {
        - usuario: Usuario
        + recomendar() : List<Cancion>
    }

    class FiltroEstreno  {
        + recomendar() : List<Cancion>
    }

    class FiltroPlaylistGenero {
        + recomendar() : List<Playlist>
    }

    class ServicioRecomendaciones {
        + recomendarCanciones(u: Usuario, g: Genero, estrenos: boolean) : List<Cancion>
        + recomendarPlaylists(g: Genero) : List<Playlist>
    }

  Recomendador <|.. RecomendadorCanciones
  Recomendador <|.. FiltroRecomendador
  Recomendador <|.. RecomendadorPlaylists
  FiltroRecomendador <|-- FiltroGenero
  FiltroRecomendador <|-- FiltroUsuario
  FiltroRecomendador <|-- FiltroEstreno
  FiltroRecomendador <|-- FiltroPlaylistGenero
  ServicioRecomendaciones --> Recomendador
}


package "CatalogoPlaylist" {

    interface "ComponentePlaylist" {
        +mostrarInformacion(): void
        +obtenerDuracion(): double
        +agregar(componente: ComponentePlaylist): void
        +eliminar(componente: ComponentePlaylist): void
        +getComponentes(): List<ComponentePlaylist>
    }

    class "Playlist" implements "ComponentePlaylist" {
        -idPlaylist: int
        -tituloPlaylist: String
        -descripcion: String
        -fechaCreacion: Date
        -fechaModificacion: Date
        -propietario: Perfil
        -imagenPortada: BufferedImage
        -componentes: List<ComponentePlaylist>

        +Playlist(titulo: String, descripcion: String, propietario: Perfil)
        +getTitulo(): String
        +getDescripcion(): String
        +getPropietario(): Perfil
        +calcularCantidadCanciones(): int

        +mostrarInformacion(): void
        +obtenerDuracion(): double
        +agregar(componente: ComponentePlaylist): void
        +eliminar(componente: ComponentePlaylist): void
        +getComponentes(): List<ComponentePlaylist>
    }

    class "ElementoCancion" implements "ComponentePlaylist" {
        -cancion: Cancion
        -fechaAgregado: Date
        -orden: int

        +ElementoCancion(cancion: Cancion)
        +ElementoCancion(cancion: Cancion, orden: int)
        +getCancion(): Cancion
        +getFechaAgregado(): Date
        +getOrden(): int
        +setOrden(orden: int): void

        +mostrarInformacion(): void
        +obtenerDuracion(): double
        +agregar(componente: ComponentePlaylist): void
        +eliminar(componente: ComponentePlaylist): void
        +getComponentes(): List<ComponentePlaylist>
    }

    class "PlaylistDAO" {
        +registrarPlaylist(playlist: Playlist): void
        +actualizarPlaylist(playlist: Playlist): void
        +eliminarPlaylist(playlist: Playlist): void
        +buscarPlaylist(): List<Playlist>
        +buscarPlaylistPorId(id: int): Playlist
        +buscarPlaylistPorNombre(nombre: String): List<Playlist>
        +obtenerPlaylistPorUsuario(usuario: Perfil): List<Playlist>
    }

    class "ServicioValidacionPlaylist" {
        +validarDatosCompletos(playlist: Playlist): boolean
        +tieneDuplicados(playlist: Playlist): boolean
        +validarDescripcion(descripcion: String): boolean
        +validarTitulo(titulo: String): boolean
    }

    PlaylistDAO --> ServicioValidacionPlaylist
    PlaylistDAO --> Playlist
    Playlist *-- ComponentePlaylist
}

ElementoCancion --> Cancion
Playlist --> Perfil
PlaylistDAO --> Perfil
ReproductorMusical --> Cancion
Usuario --> ReproductorMusical
ServicioValidacionCancion ..|> IUnicoNombreValidable
CancionDAO -- ArtistaDAO
Administrador -- CancionDAO
Administrador -- ArtistaDAO
Administrador --- Playlist
Usuario --> Playlist
Usuario --> "*" Genero : preferenciasMusicales
FiltroUsuario --> Usuario
FiltroGenero  --> Genero
FiltroEstreno --> Cancion
FiltroPlaylistGenero --> Playlist
FiltroPlaylistGenero --> Genero
RecomendadorCanciones --> Cancion
RecomendadorCanciones --> CancionDAO
RecomendadorPlaylists --> Playlist
RecomendadorPlaylists --> PlaylistDAO
ReproductorMusical --> ServicioRecomendaciones
@enduml

