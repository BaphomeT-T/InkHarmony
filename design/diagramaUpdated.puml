@startuml
package "CatalogoCanciones"{
    class Cancion {
        -idCancion: int
        -tituloCancion: String
        -artista: List<Artista>
        -generos: List<Genero>
        -duracion: double
        -anioCancion: int
        -portadaCancion: BufferedImage
        -archivoMP3: BLOB
        -fechaRegistro: Date
    }
    class CancionDAO {
        +registrarCancion(cancion:Cancion): void
        +actualizarCancion(cancion:Cancion): void
        +buscarCanciones(): List<Cancion>
        +buscarCancionNombre(nombre: string): Cancion
        +eliminarCancion(cancion:Cancion): void
    }
    enum Genero {
        GAME_OST
        ROCK
        ROCK_ALTERNATIVO
        VALS
        TANGO
        REGIONAL_MEXICANA
        RAP
        CLASICA
        MOVIE_OST
        JAZZ
        COUNTRY
        POP
        REGGAETON
        TRAP_LATINO
        TRAP
        K_POP
        BOLERO
        PASILLO
    }
class ServicioValidacionCancion {
    - cancionDAO: CancionDAO

    +validarTitulo(titulo: String): boolean
    +validarAnio(anio: int): boolean
    +validarArtistas(artistas: List<ArtistaDTO>): boolean
    +validarGeneros(generos: List<String>): boolean
    +validarPortada(portada: byte[]): boolean
    +validarArchivoMP3(archivoMP3: byte[]): boolean
    +validar(cancion: CancionDTO, esActualizacion: boolean): boolean
}
Cancion --> CancionDAO
Cancion --> Genero
ServicioValidacionCancion --> CancionDAO
}

package "CatalogoArtistas" {
    class ArtistaDAO {
                +registrar(artista: ArtistaDTO): boolean
                +actualizar(artista: ArtistaDTO): boolean
                +eliminar(id: int): boolean
                +buscarTodo(): List<ArtistaDTO>
                +buscarPorId(id: int): ArtistaDTO
                +tieneCancionesAsociadas(idArtista: int): boolean
            }
            class "ServicioValidacionArtista"{
                +validarCamposNombre(nombre: String):String
                +esNombreUnico(nombre: String): boolean
                +tieneElementoAsociados(artista: ArtistaDTO):boolean
            }
            class "Artista"{
                -id:int
                -nombre:String
                -generos:List<Genero>
                -fechaNacimiento: Date
                -biografia: String
                -imagen: BufferedImage
            }

            interface UnicoNombreValidable{
               +esNombreUnico(nombre: String): boolean
            }
            interface AsociacionValidable{
               +tieneElementosAsociados(artista: ArtistaDTO):boolean
            }
    ArtistaDAO --> Artista
    ArtistaDAO --> "ServicioValidacionArtista"
    "ServicioValidacionArtista" --> Artista
    "ServicioValidacionArtista" ..|> UnicoNombreValidable
    "ServicioValidacionArtista" ..|> AsociacionValidable
    Artista --> Genero
}
package "Administraci√≥n de usuarios" {
  class Perfil {
      - nombre: String
      - apellido: String
      - correo: String
      - contrasenia: String
      - estadoCuenta: String
      - fechaRegistro: Date
      - foto: String
    }

    class Usuario {
      - preferenciasMusicales: List<GeneroDTO>
      + actualizarPerfil(PerfilDTO perfil, boolean borrarPreferencias, List<GeneroDTO> nuevosGeneros): boolean
      + {static} preferenciasToJSON(List<GeneroDTO> preferenciasMusicales): String
      + {static}  preferenciasFromJSON(String json): List<GeneroDTO>
    }

    class Administrador {
      + consultarUsuarios(): List<PerfilDTO>
      + activarCuenta(usuario: PerfilDTO): void
      + desactivarCuenta(usuario: PerfilDTO): void
      + cambiarTipoUsuario(usuario: PerfilDTO, tipoUsuario: TipoUsuario): void
      + eliminarCuenta(usuario: PerfilDTO): void
    }

    class ServicioPerfil {
      - perfilDAO: PerfilDAO
      - {static} encoder: BCryptPasswordEncoder
      + registrarUsuario(String nombre, String apellido, String correo, String contrasenia, String foto): void
      + autenticar(String correo, String contraseniaIngresada): PerfilDTO
    }
    Enum TipoUsuario {
    ADMINISTRADOR
    USUARIO
    }
    class Sesion {
      - usuarioActual: PerfilDTO
      - {static} sesion: Sesion
      - Sesion()
      + {static} getSesion(): Sesion
      + iniciarSesion(usarioLogueado: PerfilDTO): void
      + cerrarSesion(): void
      + obtenerUsuarioActual(): PerfilDTO
    }


  ServicioPerfil .> Perfil
  Usuario --|> Perfil
  Administrador --|> Perfil
  Perfil --> "1" TipoUsuario: tipoUsuario
  Perfil <-- Sesion

}


package "ReproductorMusical" { 

  

    class ReproductorMP3 { 

        - motor: MotorReproduccion 

        - playlist: GestorPlaylist 

        - estadoActual: EstadoReproductor 

        + getInstancia(nuevaLista: List): ReproductorMP3 

        + reproducir(): void 

        + pausar(): void 

        + reanudar(): void 

        + detener(): void 

        + siguiente(): void 

        + anterior(): void 

        + cambiarPlaylist(nuevaLista: List): void 

        + iniciarReproduccionDesde(frameInicial: int): void 

        + cerrarReproduccion(): void 

        + cerrarReproduccionTotal(): void 

        + moverAFrame(nuevoFrame: int): void 

        + getPlaylist(): GestorPlaylist 

        + getMotor(): MotorReproduccion 

        + getEstado(): EstadoReproductor 

        + setEstado(estado: EstadoReproductor): void 

    } 

  

    class MotorReproduccion { 

        - player: AdvancedPlayerAcc 

        - hilo: Thread 

        - frameActual: int 

        + reproducir(cancion: byte[], desdeFrame: int, alFinalizar: Runnable): void 

        + cerrar(): void 

        + getFrameActual(): int 

        + setFrameActual(frame: int): void 

        + getPlayer(): AdvancedPlayerAcc 

    } 

  

    class GestorPlaylist { 

        - canciones: List 

        - indiceActual: int 

        + obtenerCancionActual(): byte[] 

        + siguiente(): void 

        + anterior(): void 

        + reiniciar(): void 

        + getIndiceActual(): int 

        + setIndiceActual(indice: int): void 

        + getCanciones(): List 

        + setCanciones(nuevaLista: List): void 

    } 

  

    interface IEstadoReproductor { 

        + reproducir(): void 

        + pausar(): void 

        + reanudar(): void 

        + detener(): void 

        + siguiente(): void 

        + anterior(): void 

    } 

  

    class EstadoDetenido { 

        - reproductor: ReproductorMP3 

    } 

  

    class EstadoReproduciendo { 

        - reproductor: ReproductorMP3 

    } 

  

    class EstadoPausado { 

        - reproductor: ReproductorMP3 

    } 

  

    class AdvancedPlayerAcc { 

        + getLastPosition(): int 

    } 

  

    EstadoDetenido ..|> IEstadoReproductor 

    EstadoReproduciendo ..|> IEstadoReproductor 

    EstadoPausado ..|> IEstadoReproductor 

  

    ReproductorMP3 --> MotorReproduccion 

    ReproductorMP3 --> GestorPlaylist 

    ReproductorMP3 --> IEstadoReproductor 

    MotorReproduccion --> AdvancedPlayerAcc 

  

    folder "JLayer" <<library>> { 

        class AdvancedPlayer 

    } 

  

    AdvancedPlayerAcc --|> AdvancedPlayer 

} 


package "Recomendaciones" {
  interface Recomendador {
    + recomendar(): List<Cancion>
  }

  class RecomendadorCanciones {
    - cancionDAO: CancionDAO
    + recomendar(): List<Cancion>
  }

  abstract class FiltroRecomendador {
    # siguiente: Recomendador
    # FiltroRecomendador(siguiente: Recomendador)
    + recomendar(): List<Cancion>
  }

  class FiltroGenero  {
    + FiltroGenero(siguiente: Recomendador, genero: Genero)
    + recomendar(): List<Cancion>
  }

  class FiltroPreferencias  {
    + FiltroPreferencias(siguiente: Recomendador)
    + recomendar(): List<Cancion>
  }

  class FiltroEstreno  {
    - diasEstreno: int
    + FiltroEstreno(siguiente: Recomendador)
    + recomendar(): List<Cancion>
  }

  class FiltroArtista  {
    - nombreArtista: String
    + FiltroArtista(siguiente: Recomendador, nombreArtista: String)
    + recomendar(): List<Cancion>
  }

  class ServicioRecomendaciones {
    + recomendar(usarPreferencias: boolean, genero: Genero, artista: String, estrenos: boolean): List<Cancion>
  }

    Recomendador <|.. RecomendadorCanciones
    Recomendador <|.. FiltroRecomendador
    FiltroRecomendador <|-- FiltroGenero
    FiltroRecomendador <|-- FiltroPreferencias
    FiltroRecomendador <|-- FiltroEstreno
    FiltroRecomendador <|-- FiltroArtista
    ServicioRecomendaciones --> Recomendador
}

package "CatalogoPlaylist" {

    interface "ComponentePlaylist" {
        +mostrarInformacion(): void
        +obtenerDuracion(): double
        +agregar(componente: ComponentePlaylist): void
        +eliminar(componente: ComponentePlaylist): void
        +getComponentes(): List<ComponentePlaylist>
    }

    class "Playlist" implements "ComponentePlaylist" {
        -idPlaylist: int
        -tituloPlaylist: String
        -descripcion: String
        -fechaCreacion: Date
        -fechaModificacion: Date
        -propietario: Perfil
        -imagenPortada: BufferedImage
        -componentes: List<ComponentePlaylist>

        +Playlist(titulo: String, descripcion: String, propietario: Perfil)
        +getTitulo(): String
        +getDescripcion(): String
        +getPropietario(): Perfil
        +calcularCantidadCanciones(): int

        +mostrarInformacion(): void
        +obtenerDuracion(): double
        +agregar(componente: ComponentePlaylist): void
        +eliminar(componente: ComponentePlaylist): void
        +getComponentes(): List<ComponentePlaylist>
    }

    class "ElementoCancion" implements "ComponentePlaylist" {
        -cancion: Cancion
        -fechaAgregado: Date
        -orden: int

        +ElementoCancion(cancion: Cancion)
        +ElementoCancion(cancion: Cancion, orden: int)
        +getCancion(): Cancion
        +getFechaAgregado(): Date
        +getOrden(): int
        +setOrden(orden: int): void

        +mostrarInformacion(): void
        +obtenerDuracion(): double
        +agregar(componente: ComponentePlaylist): void
        +eliminar(componente: ComponentePlaylist): void
        +getComponentes(): List<ComponentePlaylist>
    }

    class "PlaylistDAO" {
        +registrarPlaylist(playlist: Playlist): void
        +actualizarPlaylist(playlist: Playlist): void
        +eliminarPlaylist(playlist: Playlist): void
        +buscarPlaylist(): List<Playlist>
        +buscarPlaylistPorId(id: int): Playlist
        +buscarPlaylistPorNombre(nombre: String): List<Playlist>
        +obtenerPlaylistPorUsuario(usuario: Perfil): List<Playlist>
    }

    class "ServicioValidacionPlaylist" {
        +validarDatosCompletos(playlist: Playlist): boolean
        +tieneDuplicados(playlist: Playlist): boolean
        +validarDescripcion(descripcion: String): boolean
        +validarTitulo(titulo: String): boolean
    }

    PlaylistDAO --> ServicioValidacionPlaylist
    PlaylistDAO --> Playlist
    Playlist *-- ComponentePlaylist
}

ElementoCancion --> Cancion
Playlist --> Perfil
PlaylistDAO --> Perfil
ReproductorMusical --> Cancion
ReproductorMusical --> Playlist
Usuario --> ReproductorMusical
ServicioValidacionCancion ..|> UnicoNombreValidable
CancionDAO -- ArtistaDAO
Administrador -- CancionDAO
Administrador -- ArtistaDAO
Administrador --- Playlist
Usuario --> Playlist
Usuario --> "*" Genero : preferenciasMusicales
FiltroPreferencias --> Genero
FiltroPreferencias --> Perfil
FiltroPreferencias --> Usuario
FiltroPreferencias --> Cancion
FiltroGenero  --> Genero
FiltroGenero  --> Cancion
FiltroEstreno --> Cancion
FiltroArtista --> Cancion
FiltroRecomendador --> Cancion
RecomendadorCanciones --> CancionDAO
RecomendadorCanciones --> Cancion
ServicioRecomendaciones --> Cancion
@enduml
