@startuml
package "CatalogoPlaylist" {

    interface "ComponentePlaylist" {
        +mostrarInformacion(): void
        +obtenerDuracion(): double
        +agregar(componente: ComponentePlaylist): void
        +eliminar(componente: ComponentePlaylist): void
        +getComponentes(): List<ComponentePlaylist>
    }

    class "Playlist" implements "ComponentePlaylist" {
        -idPlaylist: int
        -tituloPlaylist: String
        -descripcion: String
        -fechaCreacion: Date
        -fechaModificacion: Date
        -propietario: Perfil
        -imagenPortada: BufferedImage
        -componentes: List<ComponentePlaylist>

        +Playlist(titulo: String, descripcion: String, propietario: Perfil)
        +getTitulo(): String
        +getDescripcion(): String
        +getPropietario(): Perfil
        +calcularCantidadCanciones(): int

        +mostrarInformacion(): void
        +obtenerDuracion(): double
        +agregar(componente: ComponentePlaylist): void
        +eliminar(componente: ComponentePlaylist): void
        +getComponentes(): List<ComponentePlaylist>
    }

    class "ElementoCancion" implements "ComponentePlaylist" {
        -cancion: Cancion
        -fechaAgregado: Date
        -orden: int

        +ElementoCancion(cancion: Cancion)
        +ElementoCancion(cancion: Cancion, orden: int)
        +getCancion(): Cancion
        +getFechaAgregado(): Date
        +getOrden(): int
        +setOrden(orden: int): void

        ' Implementación de ComponentePlaylist (interfaz común)
        +mostrarInformacion(): void
        +obtenerDuracion(): double
        +agregar(componente: ComponentePlaylist): void
        +eliminar(componente: ComponentePlaylist): void
        +getComponentes(): List<ComponentePlaylist>
    }

    class "PlaylistDAO" {
        +registrarPlaylist(playlist: Playlist): void
        +actualizarPlaylist(playlist: Playlist): void
        +eliminarPlaylist(playlist: Playlist): void
        +buscarPlaylist(): List<Playlist>
        +buscarPlaylistPorId(id: int): Playlist
        +buscarPlaylistPorNombre(nombre: String): List<Playlist>
        +obtenerPlaylistPorUsuario(usuario: Perfil): List<Playlist>
    }

    class "ServicioValidacionPlaylist" {
        +validarDatosCompletos(playlist: Playlist): boolean
        +tieneDuplicados(playlist: Playlist): boolean
        +validarDescripcion(descripcion: String): boolean
        +validarTitulo(titulo: String): boolean
    }

    PlaylistDAO --> ServicioValidacionPlaylist : usa
    PlaylistDAO --> Playlist : gestiona
    Playlist *-- ComponentePlaylist : contiene
}

package "CatalogoCanciones" {
    class "Cancion" {
        -idCancion: int
        -tituloCancion: String
        -artista: List<Artista>
        -generos: List<Genero>
        -duracion: double
        -anioCancion: int
        -portadaCancion: BufferedImage
        -archivoMP3: BLOB

    }
    ElementoCancion --> Cancion : encapsula
}

package "AdministracionUsuarios" {
    class "Perfil" {
        -nombre: String
        -apellido: String
        -correo: String
        -contrasenia: String
        -estadoCuenta: String
        -fechaRegistro: Date
        -foto: String
        -preferenciasMusicales: List<Genero>
        -tipoUsuario: TipoUsuario

    }
}

Playlist --> Perfil : propietario
PlaylistDAO --> Perfil : filtra por usuario

@enduml