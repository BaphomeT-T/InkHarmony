package "CatalogoPlaylist" {

    interface "ComponentePlaylist" {
        +mostrarInformacion(): void
        +obtenerDuracion(): double
        +getTitulo(): String
    }

    class "Playlist" implements "ComponentePlaylist" {
        -playlistDTO: PlaylistDTO
        -playlistDAO: PlaylistDAO
        -cancionDAO: CancionDAO
        -componentes: List<ComponentePlaylist>
        -validador: ServicioValidacionPlaylist

 +Playlist()
        +Playlist(titulo: String, descripcion: String, idPropietario: int)
        +getTitulo(): String
        +calcularCantidadCanciones(): int

        +registrar(titulo: String, descripcion: String, idPropietario: int, imagenPortada: byte[], cancionesIds: List<Integer>): boolean
        +buscarTodo(): List<PlaylistDTO>
        +buscarPorId(id: int): PlaylistDTO
        +buscarPorNombre(nombre: String): List<PlaylistDTO>
        +obtenerPlaylistPorUsuario(idUsuario: int): List<PlaylistDTO>
        +actualizar(playlist: PlaylistDTO): boolean
        +eliminar(idPlaylist: int): boolean
        +agregarCancion(idCancion: int): boolean
        +eliminarCancion(idCancion: int): boolean
        +obtenerCancionesParaReproduccion(): List<byte[]>
        +reproducir(): void

        +mostrarInformacion(): void
        +obtenerDuracion(): double
        +agregar(componente: ComponentePlaylist): void
        +eliminar(componente: ComponentePlaylist): void
        +getComponentes(): List<ComponentePlaylist>
        +getPlaylistDTO(): PlaylistDTO
        +setPlaylistDTO(playlistDTO: PlaylistDTO): void
    }

    class "PlaylistDAO" {
        -validador: ServicioValidacionPlaylist

        +registrar(playlist: PlaylistDTO): boolean
        +actualizar(playlist: PlaylistDTO): boolean
        +eliminar(id: Integer): boolean
        +buscarTodo(): List<PlaylistDTO>
        +buscarPorId(id: Integer): PlaylistDTO
        +buscarPorNombre(nombre: String): List<PlaylistDTO>
        +obtenerPlaylistPorUsuario(idUsuario: int): List<PlaylistDTO>
    }

    class "ServicioValidacionPlaylist" {
        +validarDatosCompletos(playlist: PlaylistDTO): boolean
        +tieneDuplicados(playlist: PlaylistDTO): boolean
        +validarDescripcion(descripcion: String): boolean
        +validarTitulo(titulo: String): boolean
    }

    PlaylistDAO --> ServicioValidacionPlaylist : usa
    PlaylistDAO --> PlaylistDTO : gestiona
    Playlist --> PlaylistDTO : usa
    Playlist --> PlaylistDAO : usa
    Playlist --> CancionDAO : usa
    Playlist --> ServicioValidacionPlaylist : usa
    Playlist *-- ComponentePlaylist : contiene
}

package "CatalogoCanciones" {
    class "Cancion" {
        -idCancion: int
        -tituloCancion: String
        -artista: List<Artista>
        -generos: List<Genero>
        -duracion: double
        -anioCancion: int
        -portadaCancion: BufferedImage
        -archivoMP3: BLOB
        -fechaAgregado: Date
        -orden: int

        +getFechaAgregado(): Date
        +getOrden(): int
        +setOrden(orden: int): void
    }
}

package "AdministracionUsuarios" {
    class "Perfil" {
        -nombre: String
        -apellido: String
        -correo: String
        -contrasenia: String
        -estadoCuenta: String
        -fechaRegistro: Date
        -foto: String
        -preferenciasMusicales: List<Genero>
        -tipoUsuario: TipoUsuario
    }
}

' Relaciones de implementaciÃ³n
Cancion ..|> ComponentePlaylist : implements

' Relaciones adicionales
Playlist --> Perfil : propietario (via PlaylistDTO)
PlaylistDAO --> Perfil : filtra por usuario
